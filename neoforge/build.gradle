plugins {
    id 'net.neoforged.moddev'
}

version = mod_version
base {
    archivesName = mod_id
}

neoForge {
    version = neoforge_version

    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }

    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        clientData {
            clientData()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        serverData {
            serverData()

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }

    dependencies {
        // compile against the JEI API but do not include it at runtime
        compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
        // at runtime, use the full JEI jar for NeoForge
        runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

        implementation("com.github.glitchfiend:GlitchCore-neoforge:${minecraft_version}-${glitchcore_version}")
        implementation("com.github.glitchfiend:TerraBlender-neoforge:${minecraft_version}-${terrablender_version}")
    }

    accessTransformers
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
package grill24.potionsplus.core;

import grill24.potionsplus.item.*;
import grill24.potionsplus.item.FishingRodItem;
import grill24.potionsplus.item.builder.*;
import grill24.potionsplus.utility.ModInfo;
import net.minecraft.core.Holder;
import net.minecraft.core.registries.Registries;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.food.Foods;
import net.minecraft.world.item.*;
import net.minecraft.world.level.biome.Biomes;
import net.neoforged.neoforge.registries.DeferredRegister;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Supplier;

import static grill24.potionsplus.utility.Utility.mc;
import static grill24.potionsplus.utility.Utility.ppId;

public class Items {
    public static final DeferredRegister<Item> ITEMS = DeferredRegister.create(Registries.ITEM, ModInfo.MOD_ID);

    // ----- Items -----

    public static final Holder<Item> WREATH = register(SimpleItemBuilder.create("wreath")
            .itemFactory(prop -> new ArmorItem(ArmorMaterials.WREATH, ArmorItem.Type.HELMET, prop)))
            .getHolder();

    public static final ResourceLocation[] BLOCK_HAT_MODELS = new ResourceLocation[] { ppId("item/block_hat_1"), ppId("item/block_hat_2"), ppId("item/block_hat_3"), ppId("item/block_hat_4") };
    public static final Holder<Item>[] COAL_ORE_HATS = Items.generateHats("coal_ore_hat", BLOCK_HAT_MODELS.length, () -> new EquipableHatItem(properties()));
    public static final Holder<Item>[] COPPER_ORE_HATS = Items.generateHats("copper_ore_hat", BLOCK_HAT_MODELS.length, () -> new EquipableHatItem(properties()));
    public static final Holder<Item>[] IRON_ORE_HATS = Items.generateHats("iron_ore_hat", BLOCK_HAT_MODELS.length, () -> new EquipableHatItem(properties()));
    public static final Holder<Item>[] GOLD_ORE_HATS = Items.generateHats("gold_ore_hat", BLOCK_HAT_MODELS.length, () -> new EquipableHatItem(properties()));
    public static final Holder<Item>[] DIAMOND_ORE_HATS = Items.generateHats("diamond_ore_hat", BLOCK_HAT_MODELS.length, () -> new EquipableHatItem(properties()));
    public static final Holder<Item>[] EMERALD_ORE_HATS = Items.generateHats("emerald_ore_hat", BLOCK_HAT_MODELS.length, () -> new EquipableHatItem(properties()));

    public static final Holder<Item> FROGGY_HAT = ITEMS.register("froggy_hat", () -> new EquipableHatItem(properties()));
    public static final Holder<Item> HOOK_HAT = ITEMS.register("hook_hat", () -> new EquipableHatItem(properties()));
    public static final Holder<Item> APPLE_HAT = ITEMS.register("apple_hat", () -> new EquipableHatItem(properties()));

    public static final Holder<Item> LUNAR_BERRIES = register(SimpleItemBuilder.create("lunar_berries")
            .itemFactory(prop -> new ItemNameBlockItem(Blocks.LUNAR_BERRY_BUSH.value(), prop.food(Foods.SWEET_BERRIES))))
            .getHolder();
    public static final Holder<Item> MOSS = register(SimpleItemBuilder.createSimple("moss")).getHolder();
    public static final Holder<Item> SALT = register(SimpleItemBuilder.createSimple("salt")).getHolder();
    public static final Holder<Item> WORMROOT = register(SimpleItemBuilder.create("wormroot").itemFactory(WormrootItem::new)).getHolder();
    public static final Holder<Item> ROTTEN_WORMROOT = register(SimpleItemBuilder.createSimple("rotten_wormroot")).getHolder();

    public static final Holder<Item> REMNANT_DEBRIS = register(SimpleItemBuilder.create("remnant_debris")
            .itemFactory(prop -> new BlockItem(Blocks.REMNANT_DEBRIS.value(), prop))
            .properties(properties().fireResistant().rarity(Rarity.UNCOMMON)))
            .itemModelGenerator(null) // item model is generated by the block
            .getHolder();
    public static final Holder<Item> DEEPSLATE_REMNANT_DEBRIS = register(SimpleItemBuilder.create("deepslate_remnant_debris")
            .itemFactory(prop -> new BlockItem(Blocks.DEEPSLATE_REMNANT_DEBRIS.value(), prop))
            .properties(properties().fireResistant().rarity(Rarity.UNCOMMON)))
            .itemModelGenerator(null) // item model is generated by the block
            .getHolder();
    //ITEMS.register("deepslate_remnant_debris", () -> new BlockItem(Blocks.DEEPSLATE_REMNANT_DEBRIS.value(), properties().fireResistant().rarity(Rarity.UNCOMMON)));
    public static final Holder<Item> NETHERITE_REMNANT = register(SimpleItemBuilder.createSimple("netherite_remnant").properties(properties().fireResistant().rarity(Rarity.UNCOMMON))).getHolder();

    public static final Holder<Item> RAW_URANIUM = register(SimpleItemBuilder.createSimple("raw_uranium").properties(properties().rarity(Rarity.UNCOMMON))).getHolder();
    public static final Holder<Item> URANIUM_INGOT = register(SimpleItemBuilder.createSimple("uranium_ingot").properties(properties().rarity(Rarity.UNCOMMON))).getHolder();
    public static final Holder<Item> SULFUR_SHARD = register(SimpleItemBuilder.createSimple("sulfur_shard")).getHolder();
    public static final Holder<Item> SULFURIC_ACID = register(SimpleItemBuilder.createSimple("sulfuric_acid")).getHolder();

    public static final ResourceLocation EDIBLE_CHOICE_ITEM_FLAG_PROPERTY_NAME = ppId("edible_choice_flag");
    public static final EdibleChoiceItemBuilder SPARKLING_SQUASH = register(EdibleChoiceItemBuilder.create("sparkling_squash", ppId("item/sparkling_squash")));
    public static final EdibleChoiceItemBuilder BLUEB_BERRIES = register(EdibleChoiceItemBuilder.create("blueb_berries", ppId("item/blueb_berries")));
    public static final EdibleChoiceItemBuilder FORTIFYING_FUDGE = register(EdibleChoiceItemBuilder.create("fortifying_fudge", ppId("item/fortifying_fudge")));
    public static final EdibleChoiceItemBuilder GRASS_CLIPPINGS = register(EdibleChoiceItemBuilder.create("grass_clippings", ppId("item/grass_clippings")));
    public static final EdibleChoiceItemBuilder STONE_FRUIT = register(EdibleChoiceItemBuilder.create("stone_fruit", ppId("item/stone_fruit")));
    public static final EdibleChoiceItemBuilder CHOCOLATE_BOOK = register(EdibleChoiceItemBuilder.create("chocolate_book", ppId("item/chocolate_book")));
    public static final EdibleChoiceItemBuilder ROASTED_BAMBOO = register(EdibleChoiceItemBuilder.create("roasted_bamboo", ppId("item/roasted_bamboo")));
    public static final EdibleChoiceItemBuilder MOSSASHIMI = register(EdibleChoiceItemBuilder.create("mossashimi", ppId("item/mossashimi")));
    public static final EdibleChoiceItemBuilder PYRAMIDS_OF_SALT = register(EdibleChoiceItemBuilder.create("pyramids_of_salt", ppId("item/pyramids_of_salt")));

    public static final EdibleChoiceItemBuilder BASIC_LOOT = register(EdibleChoiceItemBuilder.create("basic_loot", ppId("item/basic")));
    public static final EdibleChoiceItemBuilder INTERMEDIATE_LOOT = register(EdibleChoiceItemBuilder.create("intermediate_loot", ppId("item/intermediate")));
    public static final EdibleChoiceItemBuilder ADVANCED_LOOT = register(EdibleChoiceItemBuilder.create("advanced_loot", ppId("item/advanced")));
    public static final EdibleChoiceItemBuilder MASTER_LOOT = register(EdibleChoiceItemBuilder.create("master_loot", ppId("item/master")));

    public static final EdibleChoiceItemBuilder WHEEL = register(EdibleChoiceItemBuilder.create("wheel", ppId("item/wheel_0")));

    public static final Holder<Item> COPPER_FISHING_ROD = ITEMS.register("copper_fishing_rod", () -> new FishingRodItem(properties().durability(80)));

    public static final FishItemBuilder NORTHERN_PIKE = register(FishItemBuilder.create("northern_pike")
            .sizeProvider(FishItemBuilder.LARGE_SIZE)
            .biomes(Biomes.BEACH, Biomes.FOREST, Biomes.PLAINS, Biomes.SNOWY_PLAINS));
    public static final FishItemBuilder PARROTFISH = register(FishItemBuilder.create("parrotfish")
            .sizeProvider(FishItemBuilder.SMALL_SIZE)
            .biomes(Biomes.DESERT, Biomes.WINDSWEPT_SAVANNA, Biomes.SAVANNA, Biomes.SAVANNA_PLATEAU, Biomes.LUSH_CAVES));
    public static final FishItemBuilder RAINFORDIA = register(FishItemBuilder.create("rainfordia")
        .sizeProvider(FishItemBuilder.SMALL_SIZE)
            .biomes(Biomes.SAVANNA, Biomes.BAMBOO_JUNGLE, Biomes.PLAINS));
    public static final FishItemBuilder GARDEN_EEL = register(FishItemBuilder.create("garden_eel")
            .sizeProvider(FishItemBuilder.SMALL_SIZE)
            .biomes(Biomes.FLOWER_FOREST, Biomes.SUNFLOWER_PLAINS, Biomes.CHERRY_GROVE, Biomes.LUSH_CAVES));
    public static final FishItemBuilder ROYAL_GARDEN_EEL = register(FishItemBuilder.create("royal_garden_eel", true)
            .sizeProvider(FishItemBuilder.SMALL_SIZE)
            .biomes(Biomes.FLOWER_FOREST, Biomes.SUNFLOWER_PLAINS, Biomes.CHERRY_GROVE, Biomes.LUSH_CAVES)
            .canBeCaughtOutsideBiome(false)
            .baseFishWeight(5)
            .biomeBonusWeight(0)
            .quality(2));
    public static final FishItemBuilder LONGNOSE_GAR = register(FishItemBuilder.create("longnose_gar")
            .sizeProvider(FishItemBuilder.LARGE_SIZE)
            .biomes(Biomes.TAIGA, Biomes.ICE_SPIKES, Biomes.SNOWY_TAIGA, Biomes.FROZEN_RIVER));
    public static final FishItemBuilder SHRIMP = register(FishItemBuilder.create("shrimp")
            .sizeProvider(FishItemBuilder.SMALL_SIZE)
            .biomes(Biomes.MANGROVE_SWAMP, Biomes.SWAMP, Biomes.GROVE));
    public static final FishItemBuilder FRIED_SHRIMP = register(FishItemBuilder.create("fried_shrimp", true)
            .sizeProvider(FishItemBuilder.SMALL_SIZE)
            .biomes(Biomes.MUSHROOM_FIELDS, grill24.potionsplus.core.Biomes.ARID_CAVE_KEY, Biomes.MANGROVE_SWAMP)
            .canBeCaughtOutsideBiome(false)
            .baseFishWeight(5)
            .biomeBonusWeight(0)
            .quality(2));
    public static final FishItemBuilder MOORISH_IDOL = register(FishItemBuilder.create("moorish_idol")
            .sizeProvider(FishItemBuilder.MEDIUM_SIZE)
            .biomes(Biomes.JUNGLE, Biomes.BAMBOO_JUNGLE, Biomes.SPARSE_JUNGLE, Biomes.BIRCH_FOREST, Biomes.PLAINS));
    public static final FishItemBuilder MOLTEN_MOORISH_IDOL = register(FishItemBuilder.create("molten_moorish_idol", true)
            .sizeProvider(FishItemBuilder.MEDIUM_SIZE)
            .biomes(grill24.potionsplus.core.Biomes.VOLCANIC_CAVE_KEY)
            .canBeCaughtOutsideBiome(false)
            .baseFishWeight(5)
            .biomeBonusWeight(0)
            .quality(2));
    public static final FishItemBuilder OCEAN_SUNFISH = register(FishItemBuilder.create("ocean_sunfish")
            .sizeProvider(FishItemBuilder.LARGE_SIZE)
            .biomes(Biomes.OCEAN, Biomes.DEEP_OCEAN, Biomes.WARM_OCEAN, Biomes.COLD_OCEAN, Biomes.FROZEN_OCEAN, Biomes.JAGGED_PEAKS, Biomes.STONY_PEAKS));
    public static final FishItemBuilder PORTUGUESE_MAN_O_WAR = register(FishItemBuilder.create("portuguese_man_o_war")
            .sizeProvider(FishItemBuilder.LARGE_SIZE)
            .biomes(Biomes.WARM_OCEAN, Biomes.JAGGED_PEAKS, Biomes.STONY_PEAKS));
    public static final FishItemBuilder BLUEGILL = register(FishItemBuilder.create("bluegill")
            .sizeProvider(FishItemBuilder.MEDIUM_SIZE)
            .biomes(Biomes.FLOWER_FOREST, Biomes.LUSH_CAVES, Biomes.SNOWY_PLAINS, Biomes.SNOWY_BEACH));
    public static final FishItemBuilder NEON_TETRA = register(FishItemBuilder.create("neon_tetra")
            .sizeProvider(FishItemBuilder.SMALL_SIZE)
            .biomes(Biomes.FLOWER_FOREST, Biomes.SNOWY_SLOPES, Biomes.BADLANDS));
    public static final FishItemBuilder GIANT_MANTA_RAY = register(FishItemBuilder.create("giant_manta_ray")
            .sizeProvider(FishItemBuilder.LARGE_SIZE)
            .biomes(Biomes.ERODED_BADLANDS, Biomes.WOODED_BADLANDS, Biomes.BIRCH_FOREST));
    public static final FishItemBuilder FROZEN_GIANT_MANTA_RAY = register(FishItemBuilder.create("frozen_giant_manta_ray", true)
            .sizeProvider(FishItemBuilder.LARGE_SIZE)
            .biomes(grill24.potionsplus.core.Biomes.ICE_CAVE_KEY, Biomes.FROZEN_PEAKS, Biomes.FROZEN_RIVER)
            .canBeCaughtOutsideBiome(false)
            .baseFishWeight(5)
            .biomeBonusWeight(0)
            .quality(2));
    public static final FishItemBuilder LIZARDFISH = register(FishItemBuilder.create("lizardfish")
            .sizeProvider(FishItemBuilder.MEDIUM_SIZE)
            .biomes(Biomes.FOREST, Biomes.DARK_FOREST, Biomes.MUSHROOM_FIELDS, Biomes.LUSH_CAVES, Biomes.SUNFLOWER_PLAINS));

    public static final Holder<Item> UPGRADE_BASE = register(SimpleItemBuilder.create("upgrade_base").itemFactory(UpgradeBaseItem::new)).getHolder();
    public static final Holder<Item> FILTER_HOPPER_UPGRADE_BLACKLIST = register(SimpleItemBuilder.create("filter_hopper_upgrade_blacklist").itemFactory(UpgradeBaseItem::new)).getHolder();
    public static final Holder<Item> FILTER_HOPPER_UPGRADE_ALLOW_ARMOR = register(SimpleItemBuilder.create("filter_hopper_upgrade_allow_armor").itemFactory(UpgradeBaseItem::new)).getHolder();
    public static final Holder<Item> FILTER_HOPPER_UPGRADE_ALLOW_FOOD = register(SimpleItemBuilder.create("filter_hopper_upgrade_allow_food").itemFactory(UpgradeBaseItem::new)).getHolder();
    public static final Holder<Item> FILTER_HOPPER_UPGRADE_ALLOW_TOOLS = register(SimpleItemBuilder.create("filter_hopper_upgrade_allow_tools").itemFactory(UpgradeBaseItem::new)).getHolder();
    public static final Holder<Item> FILTER_HOPPER_UPGRADE_ALLOW_POTIONS = register(SimpleItemBuilder.create("filter_hopper_upgrade_allow_potions").itemFactory(UpgradeBaseItem::new)).getHolder();
    public static final Holder<Item> FILTER_HOPPER_UPGRADE_ALLOW_ENCHANTED = register(SimpleItemBuilder.create("filter_hopper_upgrade_allow_enchanted").itemFactory(UpgradeBaseItem::new)).getHolder();
    public static final Holder<Item> FILTER_HOPPER_UPGRADE_ALLOW_POTION_INGREDIENTS = register(SimpleItemBuilder.create("filter_hopper_upgrade_allow_potion_ingredients").itemFactory(UpgradeBaseItem::new)).getHolder();
    public static final Holder<Item> FILTER_HOPPER_UPGRADE_ALLOW_EDIBLE_REWARDS = register(SimpleItemBuilder.create("filter_hopper_upgrade_allow_edible_rewards").itemFactory(UpgradeBaseItem::new)).getHolder();

    // ----- Dynamically Rendered Display Items -----
    public static final ResourceLocation DYNAMIC_ICON_INDEX_PROPERTY_NAME = ppId("dynamic_icon_index");

    public static final SimpleItemBuilder<Item> POTION_EFFECT_ICON = register(SimpleItemBuilder.create("potion_effect_icon")
            .itemFactory(Item::new)
            .itemModelGenerator(new ItemOverrideUtility.PotionEffectIconOverrideModelData(DYNAMIC_ICON_INDEX_PROPERTY_NAME)));

    public static final ResourceLocation AMP_TEX_LOC = ppId("item/amplifier_upgrade");
    public static final ResourceLocation DUR_TEX_LOC = ppId("item/duration_upgrade");
    public static final ResourceLocation I_TEX_LOC = ppId("item/i");
    public static final ResourceLocation II_TEX_LOC = ppId("item/ii");
    public static final ResourceLocation III_TEX_LOC = ppId("item/iii");
    public static final ResourceLocation IV_TEX_LOC = ppId("item/iv");
    public static final ResourceLocation V_TEX_LOC = ppId("item/v");
    public static final ResourceLocation VI_TEX_LOC = ppId("item/vi");
    public static final ResourceLocation VII_TEX_LOC = ppId("item/vii");
    public static final ResourceLocation VIII_TEX_LOC = ppId("item/viii");
    public static final ResourceLocation ARROW_TEX_LOC = ppId("item/arrow");
    public static final ResourceLocation UNKNOWN_TEX_LOC = ppId("item/unknown");
    public static final ResourceLocation SGA_A_TEX_LOC = mc("particle/sga_a");
    public static final ResourceLocation SGA_B_TEX_LOC = mc("particle/sga_b");
    public static final ResourceLocation SGA_C_TEX_LOC = mc("particle/sga_c");
    public static final ResourceLocation SGA_D_TEX_LOC = mc("particle/sga_d");
    public static final ResourceLocation COMMON_TEX_LOC = ppId("item/common");
    public static final ResourceLocation RARE_TEX_LOC = ppId("item/rare");
    public static final ResourceLocation NO_EXP_TEX_LOC = ppId("item/no_experience");
    public static final ResourceLocation NO_HEAT_TEX_LOC = ppId("item/no_heat");
    public static final ResourceLocation FISHING_BAR_TEX_LOC = ppId("item/fishing_bar");
    public static final ResourceLocation FISHING_BOBBER_TEX_LOC = ppId("item/fishing_bobber");
    public static final ResourceLocation COPPER_FISHING_FRAME_TEX_LOC = ppId("item/copper_fishing_frame");
    public static final ResourceLocation GOLD_FISHING_FRAME_TEX_LOC = ppId("item/gold_fishing_frame");
    public static final ResourceLocation DIAMOND_FISHING_FRAME_TEX_LOC = ppId("item/diamond_fishing_frame");
    public static final ResourceLocation PURPLE_FISHING_FRAME_TEX_LOC = ppId("item/purple_fishing_frame");
    public static final ResourceLocation GOLD_SELECTION_FRAME_TEX_LOC = ppId("item/gold_selection_frame");
    public static final ResourceLocation GLOBAL_TEX_LOC = ppId("item/global");
    public static final ResourceLocation RULER_TEX_LOC = ppId("item/ruler");
    public static final ResourceLocation COUNT_TEX_LOC = ppId("item/count");
    public static final GenericIconItemBuilder GENERIC_ICON = register(new GenericIconItemBuilder(DYNAMIC_ICON_INDEX_PROPERTY_NAME,
        AMP_TEX_LOC, DUR_TEX_LOC, I_TEX_LOC, II_TEX_LOC, III_TEX_LOC, IV_TEX_LOC, V_TEX_LOC, VI_TEX_LOC,
        VII_TEX_LOC, VIII_TEX_LOC, ARROW_TEX_LOC, UNKNOWN_TEX_LOC, SGA_A_TEX_LOC, SGA_B_TEX_LOC,
        SGA_C_TEX_LOC, SGA_D_TEX_LOC, COMMON_TEX_LOC, RARE_TEX_LOC, NO_EXP_TEX_LOC,
        NO_HEAT_TEX_LOC, FISHING_BAR_TEX_LOC, FISHING_BOBBER_TEX_LOC,
        COPPER_FISHING_FRAME_TEX_LOC, GOLD_FISHING_FRAME_TEX_LOC,
        DIAMOND_FISHING_FRAME_TEX_LOC, PURPLE_FISHING_FRAME_TEX_LOC,
        GOLD_SELECTION_FRAME_TEX_LOC, GLOBAL_TEX_LOC,
        RULER_TEX_LOC, COUNT_TEX_LOC).name("generic_icon"));

    public static Item.Properties properties() {
        return new Item.Properties();
    }

    public static List<ItemBuilder<?, ?>> ITEM_BUILDERS;
    /**
     * Registers an {@link ItemBuilder<I>} and a corresponding {@link IItemModelGenerator}.
     * This generates the Item instance, registers it and stores the holder.
     * The model generator (if present) is registered and called when data generation is run.
     * @param builder The ItemBuilder to register.
     * @return The registered ItemBuilder
     * @param <I> The type of item to register.
     */
    public static <I extends Item, B extends ItemBuilder<I, B>> B register(B builder) {
        if (ITEM_BUILDERS == null) {
            ITEM_BUILDERS = new ArrayList<>();
        }

        builder.register(ITEMS::register);
        ITEM_BUILDERS.add(builder);
        return builder;
    }

    private static Holder<Item>[] generateHats(String name, int count, Supplier<Item> supplier) {
        Holder<Item>[] hats = new Holder[count];
        for (int i = 0; i < count; i++) {
            hats[i] = ITEMS.register(name + "_" + (i+1) , supplier);
        }
        return hats;
    }
}
